C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "CONSTANTS.H"

c
c piecewise constant interpolation -- this only fills in
c data on faces which overlie coarse faces.  Intermediate
c faces will be filled in later.  This is actually exactly
c the same as interp_constant, i think!
c
c In this case, b should either be the lo or high
      subroutine interpfaceconstant(
     &     CHF_FRA[fine],
     &     CHF_CONST_FRA[coarse],
     &     CHF_BOX[b],
     &     CHF_CONST_INT[ref_ratio],
     &     CHF_BOX[bref],
     &     CHF_CONST_INT[dir]
     &     )

      integer var
      integer CHF_DDECL[ic; jc; kc]
      integer CHF_DDECL[ifine; jfine; kfine]
      integer CHF_DDECL[ii; jj; kk]


c compute on the refined face of each coarse face
      do var = 0, CHF_NCOMP[coarse] - 1
         CHF_MULTIDO[ b; ic; jc; kc ]
            CHF_MULTIDO[ bref; ii; jj; kk ]
            CHF_DTERM[
               ifine = ic*ref_ratio + ii;
               jfine = jc*ref_ratio + jj;
               kfine = kc*ref_ratio + kk]
               fine(CHF_IX[ifine;jfine;kfine],var) = coarse(CHF_IX[ic;jc;kc],var)
            CHF_ENDDO
         CHF_ENDDO
      end do

      return
      end


c
c piecewise bi-(tri-)linear interpolation to "fine" assuming that
c piecewise constant interpolation has already been done
c this is probably also the same as the basic interp_linear subroutine
c
      subroutine interplinearface (
     &     CHF_FRA [ fine ],
     &     CHF_CONST_FRA [ slope ],
     &     CHF_BOX [ b ],
     &     CHF_CONST_INT [ dir ],
     &     CHF_CONST_INT [ ref_ratio ],
     &     CHF_BOX[brefface]
     &     )

      integer CHF_DDECL[ ic; jc; kc ]
      integer CHF_DDECL[ ifine; jfine; kfine ]
      integer CHF_DDECL[ ii; jj; kk ]
      integer var, id

      REAL_T dxf
c this is a box that will go from (0,0,0) to (ref_ratio-1)*(1,1,1)

c compute on the refined edges of each coarse edge
      do var = 0, CHF_NCOMP[fine] - 1
         CHF_MULTIDO[ b; ic; jc; kc ]

              CHF_MULTIDO[ brefface; ii; jj; kk ]

              CHF_DTERM[
                  ifine = ic*ref_ratio + ii;
                  jfine = jc*ref_ratio + jj;
                  kfine = kc*ref_ratio + kk ]

              CHF_DTERM[
                  if (dir .eq. 0) then
                      id = ii;
                  else if (dir .eq. 1) then
                      id = jj;
                  else if (dir .eq. 2) then
                      id = kk]
                  endif
                  dxf = -half + ( (id+half) / ref_ratio )
                  fine( CHF_IX[ifine;jfine;kfine],var) =
     &                 fine( CHF_IX[ifine;jfine;kfine],var) +
     &                 dxf * slope ( CHF_IX [ ic; jc; kc ], var )
              CHF_ENDDO
          CHF_ENDDO
      end do

      return
      end


c --------------------------------------------------------------
c  this subroutine will do linear interpolation in the normal
c  direction for interior faces (faces which do not overlie a
c  coarse face).  assumes that "exterior" face interpolation
c  has already been done.
c
      subroutine interplinearinteriorface(
     &    CHF_FRA[fine],
     &    CHF_BOX[bcoarse],
     &    CHF_CONST_INT[ref_ratio],
     &    CHF_CONST_INT[facedir],
     &    CHF_BOX[interiorrefbox]
     &    )

      integer CHF_DDECL[ic;jc;kc]
      integer CHF_DDECL[ifine;jfine;kfine]
      integer CHF_DDECL[ii;jj;kk]
      integer CHF_DDECL[iloface; jloface; kloface]
      integer CHF_DDECL[ihiface; jhiface; khiface]
      integer var, id

      REAL_T dxf, diff
      REAL_T loval, hival

      do var=0, CHF_NCOMP[fine] -1
         CHF_MULTIDO[bcoarse; ic; jc; kc]
            CHF_MULTIDO[interiorrefbox; ii;jj;kk]

            CHF_DTERM[
              ifine = ic*ref_ratio + ii;
              jfine = jc*ref_ratio + jj;
              kfine = kc*ref_ratio + kk ]

c             this will be the coordinates of the low "exterior" face
              CHF_DTERM[
              iloface = ic*ref_ratio + (1-CHF_ID(0,facedir))*ii;
              jloface = jc*ref_ratio + (1-CHF_ID(1,facedir))*jj;
              kloface = kc*ref_ratio + (1-CHF_ID(2,facedir))*kk]

c             this will be the coordinates of the hi "exterior" face
              CHF_DTERM[
              ihiface = iloface + ref_ratio*CHF_ID(0,facedir);
              jhiface = jloface + ref_ratio*CHF_ID(1,facedir);
              khiface = kloface + ref_ratio*CHF_ID(2,facedir)]

              CHF_DTERM[
              if (facedir .eq. 0) then
                 id = ii;
              else if (facedir .eq. 1) then
                 id = jj;
              else if (facedir .eq. 2) then
                 id = kk]
              endif

              dxf = float(id)/ref_ratio
              diff = fine(CHF_IX[ihiface;jhiface;khiface],var)
     &                -fine(CHF_IX[iloface;jloface;kloface],var)

              fine( CHF_IX[ifine;jfine;kfine],var) =
     &            fine(CHF_IX[iloface;jloface;kloface],var)
     &           +dxf*diff

            CHF_ENDDO
          CHF_ENDDO

       enddo

       return
       end


c
c multidimensional limiting, same as interp_limit except that we
c don't even touch slopes in normal direction (just along faces)
c
c Also need to make sure that all faces are w/in physical domain
c
c bn is a box of the neighbors on this face
c
      subroutine interplimitface (
     &     CHF_FRA [ islope ],
     &     CHF_FRA [ jslope ],
     &     CHF_FRA [ kslope ],
     &     CHF_CONST_FRA [ state ],
     &     CHF_BOX [ b ],
     &     CHF_BOX [ bn ],
     &     CHF_BOX [validBox],
     &     CHF_CONST_INT[normaldir]
     &     )

      integer CHF_DDECL [ i ; j ; k  ], var
      integer CHF_DDECL [ ii; jj; kk ]
      integer CHF_DDECL [ in; jn; kn ]
      REAL_T statemax, statemin, deltasum, etamax, etamin, eta
      REAL_T tempone, tempzero

      tempone = one
      tempzero = zero


      do var = 0, CHF_NCOMP[ islope ] - 1
         CHF_MULTIDO [ b; i; j; k]
             statemax = state ( CHF_IX[i;j;k], var )
             statemin = state ( CHF_IX[i;j;k], var )

             CHF_MULTIDO [ bn; ii; jj; kk ]

             CHF_DTERM[
                 in = i + ii;
                 jn = j + jj;
                 kn = k + kk]

                 if (
                 CHF_DTERM[
     &                in .ge. CHF_LBOUND[ validBox; 0 ] .and.
     &                in .le. CHF_UBOUND[ validBox; 0 ] ;
     &                .and.
     &                jn .ge. CHF_LBOUND[ validBox; 1 ] .and.
     &                jn .le. CHF_UBOUND[ validBox; 1 ] ;
     &                .and.
     &                kn .ge. CHF_LBOUND[ validBox; 2 ] .and.
     &                kn .le. CHF_UBOUND[ validBox; 2 ] ]
     &                )
     &        then
                    statemax = max ( statemax, state(CHF_IX[in;jn;kn],var))
                    statemin = min ( statemin, state(CHF_IX[in;jn;kn],var))
                 endif
             CHF_ENDDO

c ::: note that we filter out the slopes in the normal direction
             deltasum = half * (
                CHF_DTERM[
     &            (1-CHF_ID(normaldir,0))*abs(islope(CHF_IX[i;j;k],var));
     &            +
     &            (1-CHF_ID(normaldir,1))*abs(jslope(CHF_IX[i;j;k],var));
     &            +
     &            (1-CHF_ID(normaldir,2))*abs(kslope(CHF_IX[i;j;k],var))]
     &            )
             if ( deltasum .gt. zero ) then
                etamax = ( statemax - state ( CHF_IX[i;j;k], var ) )
     &               / deltasum
                etamin = ( state ( CHF_IX[i;j;k], var ) - statemin )
     &               / deltasum
                eta = max ( min ( etamin, etamax, tempone ), tempzero )

                CHF_DTERM[
                islope ( CHF_IX[i;j;k], var ) =
     &               eta * islope ( CHF_IX[i;j;k], var ) ;
                jslope ( CHF_IX[i;j;k], var ) =
     &               eta * jslope ( CHF_IX[i;j;k], var ) ;
                kslope ( CHF_IX[i;j;k], var ) =
     &               eta * kslope ( CHF_IX[i;j;k], var )  ]
             end if
         CHF_ENDDO
      end do

      return
      end





