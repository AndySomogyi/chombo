C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.


#include "CONSTANTS.H"
      subroutine cellgradebvtop(
     $     chf_fra1[grad],
     $     chf_const_fra1[vel],
     $     chf_const_real[dx],
     $     chf_box[lobox],
     $     chf_box[hibox],
     $     chf_box[centerbox],
     $     chf_const_int[haslo],
     $     chf_const_int[hashi],
     $     chf_const_int[divdir])

      integer chf_ddecl[ii,i;jj,j;kk,k]

      chf_dterm[
      ii = chf_id(divdir, 0);
      jj = chf_id(divdir, 1);
      kk = chf_id(divdir, 2)]

      chf_multido[centerbox;i;j;k]

      grad(chf_ix[i;j;k]) =
     $     (    vel(chf_ix[i+ii;j+jj;k+kk])
     $     -    vel(chf_ix[i-ii;j-jj;k-kk]) )/(two*dx)


      chf_enddo

      if(haslo.eq.1) then
         chf_multido[lobox;i;j;k]

         grad(chf_ix[i;j;k]) =
     $        (    vel(chf_ix[i+ii;j+jj;k+kk])
     $        -    vel(chf_ix[i   ;j   ;k   ]) )/(dx)

         chf_enddo
      endif

      if(hashi.eq.1) then
         chf_multido[hibox;i;j;k]

         grad(chf_ix[i;j;k]) =
     $        (    vel(chf_ix[i   ;j   ;k   ])
     $        -    vel(chf_ix[i-ii;j-jj;k-kk]) )/(dx)

         chf_enddo
      endif

      return
      end

      subroutine incrapplyebvtop(
     $     chf_fra1[lhs],
     $     chf_const_fra1[interiorflux],
     $     chf_const_fra1[domainfluxlo],
     $     chf_const_fra1[domainfluxhi],
     $     chf_const_real[beta],
     $     chf_const_real[dx],
     $     chf_box[lobox],
     $     chf_box[hibox],
     $     chf_box[centerbox],
     $     chf_const_int[haslo],
     $     chf_const_int[hashi],
     $     chf_const_int[facedir])

      integer chf_ddecl[ii,i;jj,j;kk,k]


      chf_dterm[
      ii = chf_id(facedir, 0);
      jj = chf_id(facedir, 1);
      kk = chf_id(facedir, 2)]

      chf_multido[centerbox; i; j; k]

      lhs(chf_ix[i;j;k]) = lhs(chf_ix[i;j;k])
     $     +beta*
     $     (interiorflux(chf_ix[i+ii;j+jj;k+kk])
     $     -interiorflux(chf_ix[i   ;j   ;k   ]))/dx

      chf_enddo


      if(haslo .eq. 1) then
         chf_multido[lobox; i; j; k]

         lhs(chf_ix[i;j;k]) = lhs(chf_ix[i;j;k])
     $        + beta*
     $        (interiorflux(chf_ix[i+ii;j+jj;k+kk])
     $        -domainfluxlo(chf_ix[i   ;j   ;k   ]))/dx

         chf_enddo
      endif

      if(hashi .eq. 1) then
         chf_multido[hibox; i; j; k]

         lhs(chf_ix[i;j;k]) = lhs(chf_ix[i;j;k])
     $        + beta*
     $        (domainfluxhi(chf_ix[i+ii;j+jj;k+kk])
     $        -interiorflux(chf_ix[i   ;j   ;k   ]))/dx

         chf_enddo
      endif


      return
      end




      subroutine normalgradviscdirch(
     $     chf_fra1[gradvelface],
     $     chf_const_fra1[velcomp],
     $     chf_const_fra1[velvalu],
     $     chf_box[facebox],
     $     chf_const_real[dx],
     $     chf_const_int[iside],
     $     chf_const_int[divdir]
     $     )

      integer chf_ddecl[i,id;j,jd;k,kd]
      real_t val0, val1, val2, denom



      chf_dterm[
      id = chf_id(divdir, 0);
      jd = chf_id(divdir, 1);
      kd = chf_id(divdir, 2)]

      if(iside.eq.-1) then

         chf_multido[facebox;i;j;k]

         val0 = velvalu(chf_ix[i   ;j   ;k   ])
         val1 = velcomp(chf_ix[i   ;j   ;k   ])
         val2 = velcomp(chf_ix[i+id;j+jd;k+kd])
         denom = three*dx
         gradvelface(chf_ix[i;j;k]) = (nine*(val1-val0)-(val2-val0))/denom

         chf_enddo

      else

         chf_multido[facebox;i;j;k]

         val0 = velvalu(chf_ix[i     ;j     ;k     ])
         val1 = velcomp(chf_ix[i-  id;j-  jd;k-  kd])
         val2 = velcomp(chf_ix[i-2*id;j-2*jd;k-2*kd])
         denom = -three*dx
         gradvelface(chf_ix[i;j;k]) = (nine*(val1-val0)-(val2-val0))/denom

         chf_enddo

      endif


      return
      end


