# -*- Mode: Makefile; Modified: "Thu 13 Apr 2006 17:28:37 by dbs"; -*-

###  This file is for 'hive', HPCRD's Opteron cluster

###  NOTE: The usual "Make.defs.ANAG" should NOT be copied or
###        symlink'd to "Make.defs.local".  That file should
###        not be set.

################################################################

# Chombo configuration variables:

#  DIM          :(2,3) number of dimensions in PDEs
#  DEBUG        :(TRUE,FALSE) compile for debugging if TRUE, else for optimizing
#  OPT          :(TRUE,HIGH,FALSE) compile optimized, highly optimized, or not
#  PRECISION    :(FLOAT,DOUBLE) size of floating point variables
#  PROFILE      :(TRUE,FALSE) compile for performance profiling or not
#  USE_SETVAL   :(TRUE,FALSE) use setVal in initialize all BaseFab<Real>
#  CXX          : command to compile/link C++ code
#  FC           : command to compile Fortran code
#  MPI          :(TRUE,FALSE) compile for parallel if TRUE, else serial
#  MPICXX       : command to compile/link C++ code in parallel
#  USE_64       :(TRUE,FALSE) compile for 64bit pointers (if available)
#  XTRACONFIG   : user-defined special config

# These variables are system-dependent:

#  USE_HDF        : use HDF5 library (TRUE or FALSE) (default is TRUE)
#  HDFINCFLAGS    : cpp options (-I*) for HDF5 include files
#  HDFLIBFLAGS    : link options (-L* -l*) for HDF5 library files
#  HDFMPIINCFLAGS : cpp options (-I*) for parallel HDF5 include files
#  HDFMPILIBFLAGS : link options (-L* -l*) for parallel HDF5 library files

# These variables are system-dependent but usually dont have to be changed:

#  AR       : command to add object files to a library file
#  CPP      : command to run the C preprocessor on Fortran files
#  DOXYGEN  : command to run the 'doyxgen' program
#  EMT      : CPP option to enable the memory tracking feature in the Chombo code
#           :    (set the variable to blank to disable this feature)
#  LD       : command to run the linker (default: use $CXX or $MPICXX, as appropriate)
#  PERL     : command to run perl
#  RANLIB   : command to post-process a library archive for random access
#  RUN      : command prefix to execute a program (usually different for parallel)
#  RUNFLAGS : command options for after the program name (before $VERBOSE $INPUT)

# Compiler variables.  The 'Make.rules' file chooses whether to use
# the 'opt' flags or the 'dbg' flags.  The 'prof' flags are added if
# PROFILE=TRUE.
#
#  cppdbgflags : debug options for the C-preprocessor (both C++ and Fortran)
#  cppoptflags : optimization options for the C-preprocessor (ditto)
#  cxxcppflags : C-preprocessor flags for C++ compiles only
#  cxxdbgflags : debug options for the C++ and MPIC++ compilers
#  cxxoptflags : optimization options for the C++ and MPIC++ compilers
#  cxxprofflags: profiling options for the C++ and MPIC++ compilers
#  fcppflags   : C-preprocessor flags for Fortran compiles only
#  fdbgflags   : debug options for the Fortran compiler
#  foptflags   : optimization options for the Fortran compiler
#  fprofflags  : profiling options for the Fortran compiler
#  lddbgflags  : debug options for the linker
#  ldoptflags  : optimization options for the linker
#  ldprofflags : profiling options for the linker
#  flibflags   : options for the linker to specify the Fortran libraries
#                (this usually is needed only when mixing C++ and
#                 Fortran compilers from different vendors)
# Notes:
# 1) The linker command always uses the CXX options in addition to its own variables,
#    so options that are common to both do not need to be repeated in the ld*flags vars
#    (e.g. -g for debugging, or -pg for profiling)
# 2) The compiler options can be set on the command line using the
#    variables: CPPFLAGS CXXFLAGS FFLAGS LDFLAGS.
#    These variables supercede any settings in the makefiles.

################################################################

makefiles+=local/Make.defs.hive

# Myrinet's implementation of MPI uses mpiCC instead of mpicxx as the C++ compiler
MPICXX=mpiCC
# compile for 64bit pointers unless user says otherwise
USE_64=TRUE


# HDF is loaded using a module or from Mike Barad's build
ifeq ($(ANAG_HDF5_DIR),)
  _hdf_root = /home/mbarad/lib/hdf5-1.6.5.parallel
  HDFINCFLAGS=-I$(_hdf_root)/include
  HDFLIBFLAGS=-L$(_hdf_root)/lib -lhdf5 -lz
  HDFMPIINCFLAGS=-I$(_hdf_root)/include
  HDFMPILIBFLAGS=-L$(_hdf_root)/lib -lhdf5 -lz -lmpio
else
  ## This relies on the 'module' system.  Only one of these (serial or parallel)
  ## will be correct at a time, depending on which module is loaded.
  _hdf_root=$(ANAG_HDF5_DIR)
  HDFINCFLAGS=$(ANAG_HDF5_INC)
  HDFLIBFLAGS=$(ANAG_HDF5_LIB)
  HDFMPIINCFLAGS=$(ANAG_HDF5_INC)
  HDFMPILIBFLAGS=$(ANAG_HDF5_LIB)
endif

# Check that the right HDF module is loaded.
ifeq ($(USE_HDF),TRUE)
  ifeq ($(MPI),TRUE)
    ifeq ($(findstring parallel,$(_hdf_root))$(findstring mpich,$(_hdf_root)),)
      $(error HDF5 directory [$(_hdf_root)] is not parallel but MPI is TRUE.  Did you load the right module?)
    endif
  else
    ifneq ($(findstring parallel,$(_hdf_root))$(findstring mpich,$(_hdf_root)),)
      $(error HDF5 directory [$(_hdf_root)] is parallel but MPI is FALSE.  Did you load the right module?)
    endif
  endif
endif

# Sometimes someone forgets to put the HDF directory in the LD_LIBRARY_PATH
# environment variable, so the loader fails to find the dynamic library.
# This check only helps when running programs using the makefiles, and is
# only necessary if building with dynamic libraries.
ifeq ($(USE_HDF),TRUE)
  ifeq ($(findstring $(_hdf_root),$(LD_LIBRARY_PATH)),)
    $(warning warning: the HDF5 directory [$(_hdf_root)] is not in the LD_LIBRARY_PATH environment var.  You should fix this.)
    ifeq ($(MPI),TRUE)
      export LD_LIBRARY_PATH := $(_hdf_root).parallel/lib:$(LD_LIBRARY_PATH)
    else
      export LD_LIBRARY_PATH := $(_hdf_root)/lib:$(LD_LIBRARY_PATH)
    endif
  endif
endif


# for running tests and examples in parallel using hive's queue system
ifeq ($(MPI),TRUE)
  RUN=prun -N 2 ./#  # instead of mpirun
endif


# InfiniteDomain lib needs FFTW version 3.
# 'Make.defs' uses FFTWDIR.
ifeq ($(USE_FFTW),TRUE)
  ifneq ($(ANAG_FFTW_DIR),)
    ifneq ($(firstword $(subst ., ,$(ANAG_FFTW_VER))),3)
      $(error error: FFTW is not version 3.  Chombo requires version 3)
    endif
    FFTWDIR:=$(ANAG_FFTW_DIR)
  endif
endif


# What compilers?
ifndef cxxname
  cxxname := $(notdir $(firstword $(CXX)))
endif
ifndef fname
  fname   := $(notdir $(firstword $(FC)))
endif

# Intel v8.x is a 32bit-only compiler
ifeq ($(cxxname),icpc)
  ifeq (8,$(word 1,$(subst ., ,$(shell $(CXX) -V 2>&1 | awk '/^Intel.*Version/{if($$7~/Version/){print $$8};if($$8~/Version/){print $$9}}'))))
    USE_64=FALSE
  endif
endif


# ElectricFence is off by default and only works in 64bit mode
ifeq ($(EFENCE),TRUE)
  ifneq ($(USE_64),TRUE)
    $(error no ElectricFence library for 32bit mode)
  endif
  lddbgflags += -lefence
endif


# For building ChomboPlot and DatasetServer
# NOTE: this is _not_ part of the standard distribution
HAS_X11_MOTIF=TRUE
X11LIBFLAGS=-L/usr/X11R6/lib  -lMrm -lXm -lXaw -lXt -lX11
X11INCFLAGS=-I/usr/X11R6/include
